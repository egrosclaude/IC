{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \qc \f0 \sa180 \li0 \fi0 \b \fs36 Representaci√≥n de texto y multimedia\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Contents\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Codificaci\u243?n de texto\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab C\u243?digos de caracteres\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Tabla de c\u243?digos ASCII\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Textos y documentos\sa180\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Imagen digital\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Color\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Profundidad de color\sa180\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Paleta de colores\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Un formato de imagen\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Reconstruyendo una imagen\sa180\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Compresi\u243?n de datos\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Compresi\u243?n sin p\u233?rdida\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Compresi\u243?n con p\u233?rdida\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Reducci\u243?n de color\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En esta parte de la unidad veremos la forma de representar otras clases de informaci\u243?n no num\u233?rica, como los textos y las im\u225?genes.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Codificaci\u243?n de texto\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Cuando escribimos texto en nuestra computadora, estamos almacenando temporariamente en la memoria una cierta secuencia de n\u250?meros que corresponden a los {\b caracteres}, o s\u237?mbolos que tipeamos en nuestro teclado.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Estos caracteres tienen una {\b representaci\u243?n gr\u225?fica} en nuestro teclado, en la pantalla o en la impresora, pero mientras est\u225?n en la memoria no pueden ser otra cosa que {\b bytes}, es decir, conjuntos de ocho d\u237?gitos binarios.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para lograr almacenar caracteres de texto necesitamos adoptar una {\b codificaci\u243?n}, es decir, una tabla que asigne a cada car\u225?cter un patr\u243?n de bits fijo.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Esta codificaci\u243?n debe ser universal: para poder compartir informaci\u243?n entre usuarios, o entre diferentes aplicaciones, se requiere alg\u250?n est\u225?ndar que sea comprendido y respetado por todos los usuarios y las aplicaciones. Hacia la mitad del siglo XX no exist\u237?a un \u250?nico est\u225?ndar, y cada fabricante de computadoras defin\u237?a el suyo propio. La comunicaci\u243?n entre diferentes computadoras y sistemas era complicada y llevaba mucho trabajo improductivo.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 C\u243?digos de caracteres\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Inicialmente se estableci\u243? con este fin el {\b c\u243?digo ASCII}, que durante alg\u250?n tiempo fue una buena soluci\u243?n. El c\u243?digo ASCII relaciona cada secuencia de {\b siete bits} con un car\u225?cter (o {\b grafema}) espec\u237?fico de la {\b Tabla ASCII}. Es decir que hay 2{\super 7}\u8196?=\u8196?128 posibles caracteres codificados por el c\u243?digo ASCII.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Sin embargo, el c\u243?digo ASCII es insuficiente para muchas aplicaciones: no contempla las necesidades de diversos idiomas. Por ejemplo, nuestra letra \u209? no figura en la tabla ASCII. Tampoco las vocales acentuadas, ni con di\u233?resis, como tampoco decenas de otros caracteres de varios idiomas europeos. Peor a\u250?n, con solamente 128 posibles patrones de bits, es imposible representar algunos idiomas orientales como el chino, que utilizan miles de ideogramas.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Por este motivo se estableci\u243? m\u225?s tarde una familia de nuevos est\u225?ndares, llamada Unicode. Uno de los est\u225?ndares o esquemas de codificaci\u243?n definidos por Unicode, el m\u225?s utilizado actualmente, se llama {\b UTF-8}. Este est\u225?ndar mantiene la codificaci\u243?n que ya empleaba el c\u243?digo ASCII para su conjunto de caracteres, pero agrega c\u243?digos de dos, tres y cuatro bytes para otros s\u237?mbolos. El resultado es que hoy, con UTF-8, se pueden representar todos los caracteres de cualquier idioma conocido. M\u225?s a\u250?n, con UTF-8 pueden codificarse textos multiling\u252?es.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Otro est\u225?ndar utilizado, {\b ISO/IEC 8851}, codifica los caracteres de la mayor\u237?a de los idiomas de Europa occidental.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El c\u243?digo ASCII, los diferentes esquemas de Unicode, y el est\u225?ndar ISO/IEC 8851, coinciden en la codificaci\u243?n de las letras del alfabeto ingl\u233?s, que son comunes a la mayor\u237?a de los idiomas occidentales, y en la codificaci\u243?n de s\u237?mbolos usuales como los d\u237?gitos, s\u237?mbolos matem\u225?ticos, y otros. Por este motivo son relativamente compatibles, aunque cuando el texto utiliza otros caracteres aparecen diferencias.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Tabla de c\u243?digos ASCII\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El c\u243?digo ASCII asigna patrones de siete bits a un conjunto de caracteres que incluye:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Las 25 letras del alfabeto ingl\u233?s, may\u250?sculas y min\u250?sculas;\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Los d\u237?gitos del 0 al 9,\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Varios s\u237?mbolos matem\u225?ticos, de puntuaci\u243?n, etc.,\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab El espacio en blanco,\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Y 32 caracteres no imprimibles. Estos caracteres no imprimibles son combinaciones de bits que no tienen una representaci\u243?n gr\u225?fica, sino que sirven para diversas funciones de comunicaci\u243?n de las computadoras con otros dispositivos.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En general, pr\u225?cticamente todos los s\u237?mbolos que figuran en nuestro teclado tienen un c\u243?digo ASCII asignado. Como s\u243?lo se usan siete bits, el bit de mayor orden (el de m\u225?s a la izquierda) de cada byte siempre es cero, y por lo tanto los c\u243?digos ASCII toman valores de 0 a 127.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Textos y documentos\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Un archivo de texto es una sucesi\u243?n de caracteres bajo alguna codificaci\u243?n. Puede manipularse con programas b\u225?sicos como los {\b editores de texto} u otras herramientas que ofrece el ambiente del sistema operativo. Un archivo de texto es directamente legible por humanos porque contiene \u250?nicamente los caracteres que constituyen las palabras.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Otra clase de archivos, los que son creados y manipulados por {\b procesadores de texto}, adem\u225?s de esa informaci\u243?n tienen una estructura compleja que permite definir caracter\u237?sticas de presentaci\u243?n y organizaci\u243?n del texto. Esto inluye los diferentes tipos, tama\u241?os o colores de los caracteres, las dimensiones de la p\u225?gina, la organizaci\u243?n en secciones o cap\u237?tulos, etc. La estructura de los archivos generados por los procesadores de texto es espec\u237?fica de cada programa y convierte al documento en algo que s\u243?lo puede ser le\u237?do con el procesador de texto correspondiente.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Una p\u225?gina HTML servida por un servidor Web es un documento de texto que suele estar codificado en el est\u225?ndar UTF-8. El contenido de este texto es directamente legible, pero no es exactamente lo que muestra el navegador, sino que esa representaci\u243?n gr\u225?fica est\u225? indicada por el lenguaje HTML en el que est\u225? escrito el documento.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Las primeras l\u237?neas del documento HTML definen cuestiones relativas a la presentaci\u243?n que har\u225? el navegador, como el idioma en el cual est\u225? escrita la p\u225?gina, el conjunto de caracteres que la codifica, el t\u237?tulo que debe presentarse en la ventana de visualizaci\u243?n, etc. Estas l\u237?neas se especifican en el lenguaje especial de la Web, el lenguaje de marcado de hipertexto, o HTML.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Ejemplo}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Este ejemplo muestra tres vistas del mismo documento, con el objetivo de mostrar que el documento se compone simplemente de una secuencia de bytes.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1)\tx360\tab Con nuestro navegador podemos visualizar el texto de esa p\u225?gina pulsando las teclas CTRL+U. Lo mismo si descargamos la p\u225?gina hacia un archivo y usamos el comando {\b head}. Lo que se ve es diferente de lo que muestra el navegador: se trata del {\b c\u243?digo fuente} de la p\u225?gina HTML.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2)\tx360\tab Con diferentes comandos o programas de visualizaci\u243?n podemos ver, car\u225?cter por car\u225?cter, c\u243?mo est\u225? construido este texto. El comando {\b hexdump -bc} nos da la lista de los caracteres que componen el texto, con su notaci\u243?n en octal que aparece encima de cada uno de ellos.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Las letras acentuadas se representan con una serie de caracteres UTF-8 especiales, no pertenecientes a la zona visible del ASCII.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Los caracteres de control como el tabulador y el fin de l\u237?nea no tienen un grafema asociado, sino que se representan por secuencias {\b \\t} y {\b \\n} respectivamente. Estos caracteres desplazan el cursor que escribe los caracteres en pantalla para organizar visualmente la presentaci\u243?n del texto, y tambi\u233?n son parte del c\u243?digo fuente de la p\u225?gina.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3)\tx360\tab Del mismo modo, el comando {\b hexdump -C} muestra cada uno de los grafemas de los caracteres acompa\u241?ado de su codificaci\u243?n en hexadecimal. Esta vista no muestra los caracteres acentuados ni los de control, reemplaz\u225?ndolos por puntos.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Pregunta}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Estos comandos muestran informaci\u243?n legible porque el documento HTML se trata, esencialmente, de un archivo de texto. \u191?Qu\u233? ocurre si los mismos comandos se aplican a un archivo creado por un procesador de texto?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Imagen digital\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Otras clases de datos, diferentes del texto, tambi\u233?n requieren codificaci\u243?n (porque siempre deben ser almacenados en la memoria en forma de bits y bytes), pero su tratamiento es diferente.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Introducir en la computadora, por ejemplo, una imagen anal\u243?gica (tal como un dibujo o una pintura hecha a mano), o un fragmento de sonido tomado del ambiente, requiere un proceso previo de {\b digitalizaci\u243?n}. Digitalizar es convertir en digital la informaci\u243?n que es anal\u243?gica, es decir, convertir un rango {\b continuo} de valores (lo que est\u225? en la naturaleza) a un conjunto {\b discreto} de valores num\u233?ricos.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Si partimos de una imagen anal\u243?gica, el proceso de digitalizaci\u243?n involucra la divisi\u243?n de la imagen en una fina cuadr\u237?cula, donde cada elemento de la cuadr\u237?cula abarca un peque\u241?o sector cuadrangular de la imagen. A cada elemento de la cuadr\u237?cula se le asignan valores discretos que codifican el color de la imagen en ese lugar.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Estos elementos o puntos se llaman {\b pixels} (del ingl\u233?s, {\b picture element}). La imagen queda constituida por una sucesi\u243?n de valores de color para cada pixel de los que forman la imagen.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En general, mientras m\u225?s elementos de cuadr\u237?cula (m\u225?s pixels) podamos representar, mejor ser\u225? la aproximaci\u243?n a nuestra pieza de informaci\u243?n original. Mientras m\u225?s fina la cuadr\u237?cula (es decir, mientras mayor sea la {\b resoluci\u243?n} de la imagen digitalizada), y mientras m\u225?s valores discretos usemos para representar los colores, m\u225?s se parecer\u225? nuestra versi\u243?n digital al original anal\u243?gico.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Notemos que la digitalizaci\u243?n de una imagen implica la discretizaci\u243?n de {\b dos} variables anal\u243?gicas:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Por un lado, los infinitos puntos de la imagen anal\u243?gica, bidimensional, deben reducirse a unos pocos rect\u225?ngulos discretos.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Por otro lado, los infinitos valores de color deben reducirse a unos pocos valores discretos, en el rango de nuestro esquema de codificaci\u243?n.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Este proceso de digitalizaci\u243?n es el que hacen autom\u225?ticamente una c\u225?mara de fotos digital o un celular, almacenando luego los bytes que representan la imagen tomada.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Color\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Hay varias maneras de representar el color en las im\u225?genes digitales. Una forma es definir, para cada pixel o punto de la imagen, tres coordenadas que describen las intensidades de luz {\b roja, verde y azul} que conforman cada color.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Cuando se crea una mezcla de rayos de luz de colores con esas intensidades, usando un proyector o una pantalla como los displays LED, las ondas luminosas individuales del rojo, verde y azul se suman formando otros colores. Este esquema de representaci\u243?n del color se llama {\b RGB} por las iniciales de los colores rojo, verde y azul en ingl\u233?s.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para cada punto, esas tres coordenadas son n\u250?meros en un cierto intervalo. El valor m\u237?nimo de una coordenada, el 0, representa la ausencia de ese color. El valor m\u225?ximo, la intensidad m\u225?xima de ese color que se puede reproducir con el dispositivo de salida que lo est\u225? visualizando. Cuando las coordenadas se representan en un byte, cada coordenada puede ir entre 0 y 255.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As\u237?, la terna (0, 0, 0) representa el negro (ausencia de los tres colores), la terna (255, 255, 255) el blanco (valores m\u225?ximos de los tres colores, sumados), etc.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Profundidad de color\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Con este esquema de representaci\u243?n de color, cada pixel o elemento de la imagen quedar\u237?a representado por tres bytes, o 24 bits. Sin embargo, las c\u225?maras fotogr\u225?ficas digitales modernas utilizan un esquema de codificaci\u243?n con mucha mayor {\b profundidad de color} (es decir, m\u225?s bits por cada coordenada de color) que en el ejemplo anterior.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Paleta de colores\par}
{\pard \ql \f0 \sa180 \li0 \fi0 L\u243?gicamente, para las im\u225?genes con muchos colores (como las escenas de la naturaleza donde hay gradaciones de colores) es conveniente contar con muchos bits de profundidad de color. Sin embargo, cuando una imagen se compone de pocos colores, estos bits se desperdician. En estos casos es \u250?til definir un formato de imagen que represente esos pocos colores utilizando menos bits.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Una forma de hacerlo es definir una {\b paleta de colores}, que es una lista de los diferentes colores utilizados en la imagen, codificados con la mayor econom\u237?a de bits posible. Si conocemos la cantidad de colores en la imagen, podemos determinar la cantidad m\u237?nima de bits que permite codificarlos a todos.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As\u237?, cada pixel de la imagen, en lugar de quedar representado por una terna de valores, puede representarse por un n\u250?mero de color en la paleta.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Queda por especificar {\b cu\u225?l color es el que est\u225? codificado por cada n\u250?mero de color} de la paleta. Si una imagen tiene dos bits de profundidad de color, los colores ser\u225?n cuatro, y sus c\u243?digos ser\u225?n {\b 00, 01, 10, 11}. Pero, \u191?cu\u225?les exactamente son estos colores? Tal vez, blanco, negro, rojo y azul. Pero tal vez sean cuatro niveles de gris. O cuatro diferentes tonos de verde.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para simplificar nuestro trabajo asumiremos que esto no es importante, sino que el problema consiste \u250?nicamente en que nuestro formato determine los c\u243?digos de colores de cada uno de los pixels. El problema de cu\u225?les son los colores asignados a esos c\u243?digos puede resolverse de otras maneras: por ejemplo, suponiendo que existe una hipot\u233?tica tabla universal de colores y c\u243?digos, conocida por todos.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El programa que reciba esta sucesi\u243?n de bits debe conocer adem\u225?s c\u243?mo se disponen en el espacio los pixels, es decir, cu\u225?l es el ancho y el alto de la imagen; y exactamente cu\u225?ntos bits codifican un pixel. Si esta informaci\u243?n no est\u225? presente en el archivo que representa la imagen, su reconstrucci\u243?n puede ser err\u243?nea o imposible.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Nuestro formato de imagen digital debe contener informaci\u243?n {\b de dimensiones y de profundidad de color}, para poder ser comunicado efectivamente hacia otros programas o computadoras.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Un formato de imagen\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Teniendo en cuenta todo lo anterior, podemos definir un formato de imagen como sigue. El formato de archivo de imagen tendr\u225? una primera secci\u243?n o {\b cabecera} con datos acerca de la imagen, o {\b metadatos}, y una segunda secci\u243?n con los bits o datos de la imagen propiamente dichos.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab El primer byte de la cabecera del archivo se reserva para especificar el {\b ancho} de la imagen, es decir, cu\u225?ntos pixels hay en cada fila.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab El segundo byte se reserva para especificar la {\b altura} o cantidad de filas de pixels de la imagen.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab El tercer byte especifica la profundidad de color, o cantidad de {\b bits por pixel}. Esta cantidad de bits por pixel define la cantidad de colores que se pueden codificar en la imagen. Si la imagen tiene {\i n} bits por pixel, hay 2{\super {\i n}} posibilidades para el c\u243?digo de color y por lo tanto 2{\super {\i n}} colores representables.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Finalmente, el resto del archivo contiene los bits que representan a cada uno de los pixels por su color. \u201?stos son los datos de la imagen propiamente dicha.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Ejemplo}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Un archivo que define una imagen de {\b cinco por cinco pixels, a cuatro colores}, comienza con los bytes 00000101, 00000101, 00000010, y sigue con los datos de la imagen.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Como la cantidad de datos binarios de un archivo en este formato es muy grande, para hacerlo m\u225?s manejable usaremos notaci\u243?n hexadecimal. Entonces el archivo del ejemplo se representa por el hexadecimal 050502... y a continuaci\u243?n siguen en hexadecimal los c\u243?digos de color de los pixels.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Reconstruyendo una imagen\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para interpretar qu\u233? imagen describe un archivo dado, consideramos primero su cabecera y buscamos cu\u225?l es el ancho y el alto (indicados por los primeros dos bytes), y cu\u225?ntos bits por pixel est\u225?n codificados en el resto del archivo (indicados por el tercer byte). De esta manera no es dif\u237?cil dibujar la imagen.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Ejemplo}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Una imagen dada por la cadena hexadecimal {\b 070401AEBF3...} tendr\u225? 7\u8197?\u215?\u8197?4 pixels, y un solo bit de paleta. Como la paleta se codifica con un solo bit, esta imagen es en blanco y negro (no puede haber m\u225?s que dos valores de color). Los d\u237?gitos hexadecimales a partir de la cadena {\b AEBF3...} se analizan como grupos de cuatro bits y nos dicen cu\u225?les pixels individuales est\u225?n en negro (bits en 1) y en blanco (bits en 0).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Compresi\u243?n de datos\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Muchas veces es interesante reducir el tama\u241?o de un archivo, para que ocupe menos espacio de almacenamiento o para que su transferencia a trav\u233?s de una red sea m\u225?s r\u225?pida. Al ser todo archivo una secuencia de bytes, y por lo tanto de n\u250?meros, disponemos de m\u233?todos y herramientas matem\u225?ticas que permiten, en ciertas condiciones, reducir ese tama\u241?o. La manipulaci\u243?n de los bytes de un archivo con este fin se conoce como compresi\u243?n.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 La compresi\u243?n de un archivo se ejecuta mediante un programa que utiliza un algoritmo especial de compresi\u243?n. Este algoritmo puede ser de compresi\u243?n sin p\u233?rdida, o con p\u233?rdida.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Compresi\u243?n sin p\u233?rdida\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Decimos que la compresi\u243?n ha sido sin p\u233?rdida cuando, del archivo comprimido, puede extraerse exactamente la misma informaci\u243?n que antes de la compresi\u243?n, utilizando otro algoritmo que ejecuta el trabajo inverso al de compresi\u243?n. En otras palabras, la compresi\u243?n sin p\u233?rdida es reversible: siempre puede volverse a la informaci\u243?n de partida. Esto es un requisito indispensable cuando necesitamos recuperar exactamente la secuencia de bytes original, como en el caso de un archivo de texto.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Como usuarios de computadoras, es muy probable que hayamos utilizado m\u225?s de una vez la compresi\u243?n sin p\u233?rdida, al tener que comprimir un documento de texto, utilizando un programa utilitario como ZIP, RAR u otros. Si la compresi\u243?n no fuera reversible, no podr\u237?amos recuperar el archivo de texto tal cual fue escrito.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Compresi\u243?n con p\u233?rdida\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En algunos casos, el resultado de la compresi\u243?n de un archivo es otro archivo del cual ya no puede recuperarse la misma informaci\u243?n original, pero que de alguna manera sigue sirviendo a los fines del usuario. Es el caso de la compresi\u243?n de im\u225?genes, donde se reduce la calidad de la imagen, ya sea utilizando menos colores, o disminuyendo la resoluci\u243?n. Tambi\u233?n es el caso de la compresi\u243?n de audio, al descartar componentes del sonido con frecuencias muy bajas o muy altas, inaudibles para los humanos (como en la tecnolog\u237?a de grabaci\u243?n de CDs), con lo cual la diferencia entre el original digital y el comprimido no es perceptible al o\u237?do. Tambi\u233?n es \u250?til, para algunos fines, reducir la calidad del audio quitando componentes audibles (lo que hacen, por ejemplo, algunos grabadores \u8220"de periodista\u8221" para lograr archivos m\u225?s peque\u241?os, con audio de menor fidelidad, pero donde el di\u225?logo sigue siendo comprensible).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Reducci\u243?n de color\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Si la imagen tiene {\i a}{\i n}{\i c}{\i h}{\i o}\u8197?\u215?\u8197?{\i a}{\i l}{\i t}{\i o} pixels, y la informaci\u243?n de color es de {\i n} bits por pixel, el archivo sin su cabecera mide {\i a}{\i n}{\i c}{\i h}{\i o}\u8197?\u215?\u8197?{\i a}{\i l}{\i t}{\i o}\u8197?\u215?\u8197?{\i n} bits. Una forma sencilla de compresi\u243?n con p\u233?rdida, que no modifica la resoluci\u243?n, es la reducci\u243?n de la profundidad de color de una imagen. Si la imagen puede seguir siendo \u250?til con menos colores, comprimiendo la paleta de colores puede obtenerse un archivo de menor tama\u241?o.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Comprimir la paleta de colores consiste en reescribir la imagen con una cantidad menor de bits por pixel. Cada vez que la cantidad de bits por pixel decrece en uno, la profundidad de color, es decir, la cantidad de colores diferentes, se divide por dos. De esta forma se puede reducir la cantidad de bits utilizados para expresar cada pixel, claro est\u225?, al costo de perder informaci\u243?n de color de la imagen.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Ejemplo}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Sea una imagen a cuatro colores; luego la cantidad de bits por pixel es 2. Al reducir la profundidad de color, los colores 00 y 10 pasan a ser el \u250?nico color 0; y los colores 10 y 11 pasan a ser el \u250?nico color 1. Todos los pixels quedan expresados por un \u250?nico bit 0 o 1, reduciendo efectivamente el tama\u241?o de la imagen.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab La informaci\u243?n ha sido {\b comprimida con p\u233?rdida} porque el archivo original no puede ser reconstruido a partir de este nuevo archivo.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab El nuevo archivo, sin su cabecera, mide {\i a}{\i n}{\i c}{\i h}{\i o}\u8197?\u215?\u8197?{\i a}{\i l}{\i t}{\i o}\u8197?\u215?\u8197?({\i n}\u8197?\u8722?\u8197?1), o sea, es {\i a}{\i n}{\i c}{\i h}{\i o}\u8197?\u215?\u8197?{\i a}{\i l}{\i t}{\i o} bits m\u225?s corto que el original.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Un m\u233?todo para reducir a la mitad la profundidad de color puede ser como sigue:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Escribir la tabla de c\u243?digos de color.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Retirar el bit m\u225?s alto de cada c\u243?digo de color en la paleta.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Eliminar de la paleta los c\u243?digos duplicados.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab Reescribir la cabecera del archivo manteniendo ancho y alto pero con la nueva cantidad de bits por pixel.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab Reescribir los datos de la imagen reemplazando el c\u243?digo original de color de cada pixel por el nuevo c\u243?digo, es decir, quitando el bit m\u225?s alto de cada pixel.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Dos pixels cuyos c\u243?digos de color difer\u237?an s\u243?lo en el bit de orden m\u225?s alto ahora tendr\u225?n el mismo c\u243?digo, y por lo tanto se "pintar\u225?n" del mismo color. El archivo ya no contiene la informaci\u243?n necesaria para saber cu\u225?l era el color original de cada pixel.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Ejemplo}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Si el archivo est\u225? dado por la cadena hexadecimal {\b 050502AEAFFAE8A600A8} (ancho: 5, alto: 5, bits por pixel: 2, pixels: 10 10 11 10 10 10 11 11 11 11 10 10 11 10 10 00 10 10 01 10 00 00 10 10 10), los pasos del procedimiento anterior son:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab La tabla de c\u243?digos de color es \{00 01 10 11\}.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Sin su bit m\u225?s alto, estos c\u243?digos son \{0 1 0 1\}.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Sin duplicados, quedan los c\u243?digos \{0 1\}.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab La cabecera del nuevo archivo es \{ancho: 5, alto: 5, bits por pixel: 1\}.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab Los bits que describen los pixels de la nueva imagen son \{0 0 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 \}.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 La imagen comprimida queda como {\b 05050123C82000} (ancho: 5, alto: 5, bits por pixel: 1, pixels: 0 0 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Pregunta}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Se ha visto c\u243?mo reducir la profundidad de color en exactamente 1 bit. \u191?C\u243?mo podemos generalizar el m\u233?todo, para reducir la informaci\u243?n de color en una cantidad de bits cualquiera?\sa180\par}
}
