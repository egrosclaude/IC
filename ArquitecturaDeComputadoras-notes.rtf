{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \qc \f0 \sa180 \li0 \fi0 \b \fs36 Arquitectura de computadoras\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Contents\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Arquitectura y Organizaci\u243?n de Computadoras\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Componentes de una computadora simple\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Memoria\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab CPU\sa180\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Arquitectura de Von Neumann\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab M\u225?quina de programa almacenado\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab CPU y Memoria\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Buses\sa180\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Modelo Computacional Binario Elemental\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Esquema del MCBE\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Memoria del MCBE\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Registros del MCBE\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab CPU del MCBE\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Formato de instrucciones del MCBE\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Conjunto de instrucciones del MCBE\sa180\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Ciclo de instrucci\u243?n\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Programaci\u243?n del MCBE\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Traza de ejecuci\u243?n\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Ayuda\sa180\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Preguntas\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Arquitectura y Organizaci\u243?n de Computadoras\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u191?C\u243?mo {\b definimos} una computadora? \u191?Cu\u225?ndo un dispositivo es una computadora y cu\u225?ndo decimos que no lo es? En esta unidad, vemos estos temas y estudiamos los diferentes componentes que tienen las computadoras.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Componentes de una computadora simple\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En primer lugar, una {\b memoria principal}, que es donde se almacenan todos los datos y las instrucciones de programa. Todo lo que puede hacer la computadora, lo hace \u250?nicamente con contenidos que est\u233?n en la memoria. Para poder procesar un dato, primero hay que hacerlo llegar a la memoria principal, no importa de d\u243?nde venga. Un conjunto de datos puede estar en disco, en un pendrive, o ser introducido por el teclado, pero s\u243?lo cuando llega a la memoria principal es que puede ser procesado por la CPU.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 La {\b CPU, o Unidad Central de Procesamiento}, es el componente que realmente lleva a cabo los c\u243?mputos. Trabaja leyendo instrucciones y datos de la memoria; y ejecuta esas instrucciones que operan sobre esos datos. Vamos a hablar mucho m\u225?s sobre la CPU en esta unidad.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Los {\b dispositivos de Entrada y Salida} son todos aquellos dispositivos que conectamos a la computadora para hacer que el conjunto CPU + Memoria se comunique con el ambiente.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Con dispositivos como el teclado, mouse, o tableta digitalizadora, podemos introducir datos. Son dispositivos de {\b entrada}.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Con dispositivos como pantalla o impresora, podemos hacer que la computadora presente los resultados de los c\u243?mputos y los entregue al usuario. Son dispositivos de {\b salida}.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Algunos dispositivos son de entrada y salida a la vez, como la tarjeta de red.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Todos estos componentes, y muchos otros que pueden estar o no presentes, dependiendo de la {\b arquitectura}, o modo de construcci\u243?n, de la computadora, est\u225?n conectados entre s\u237? mediante {\b buses} o l\u237?neas de interconexi\u243?n.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Memoria\par}
{\pard \ql \f0 \sa180 \li0 \fi0 La memoria es un componente fundamental de la computadora. Est\u225? implementada con circuitos que pueden estar en uno de dos estados el\u233?ctricos, y por esto los llamamos {\b biestables}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Cada circuito biestable puede almacenar la informaci\u243?n correspondiente a un {\b bit}. Los bits est\u225?n agrupados de a ocho formando los {\b bytes}. Estos circuitos, con las tecnolog\u237?as de hoy, est\u225?n super miniaturizados y contienen muchos millones de posiciones donde se pueden almacenar temporariamente los datos y las instrucciones de programa.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para poder utilizar la memoria es imprescindible conocer el n\u250?mero, o {\b direcci\u243?n}, de la posici\u243?n de memoria donde est\u225? el dato o instrucci\u243?n que se necesita acceder. Con esta direcci\u243?n podemos {\b recuperar}, es decir, {\b leer}, el valor que est\u225? alojado en ese byte de la memoria, o escribir sobre ese byte un contenido de ocho bits.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 CPU\par}
{\pard \ql \f0 \sa180 \li0 \fi0 La CPU est\u225? implementada como un circuito sumamente complejo que contiene {\b registros}. \u201?stos son lugares de almacenamiento temporario de datos e instrucciones que se utilizan durante el c\u243?mputo.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Si, en un momento dado, sacamos una foto instant\u225?nea de una CPU, sus registros tendr\u225?n un cierto conjunto de valores. Ese conjunto de valores se llama el {\b estado} de la CPU. La CPU, mientras opera, va cambiando de estado, es decir, paso a paso va modificando los valores de sus registros hasta llegar a un resultado de cada instrucci\u243?n.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Por atravesar esta sucesi\u243?n de cambios de estado, se dice que una CPU es un circuito {\b secuencial}. Los cambios de estado son disparados por un {\b reloj}, que es un circuito auxiliar que produce pulsos o impulsos el\u233?ctricos que hacen marchar a la CPU.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 La CPU puede interpretar un conjunto determinado de instrucciones. Estas instrucciones han sido definidas en su arquitectura; y son las \u250?nicas que puede ejecutar. El funcionamiento de la CPU est\u225? limitado a estas instrucciones, que son muy b\u225?sicas, como sumar dos datos, o leer el dato que est\u225? en una determinada direcci\u243?n de la memoria.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Sin embargo, cuando escribimos una secuencia de instrucciones en la memoria, es decir, un {\b programa}, podemos hacer que la CPU desarrolle otras tareas que no estaban previstas en su arquitectura. Por ejemplo, podemos tener una CPU que no sepa multiplicar o dividir, pero si cuenta con un programa con las instrucciones adecuadas, puede ejecutar operaciones de multiplicaci\u243?n o divisi\u243?n de datos.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 La CPU est\u225? constituida por varios circuitos componentes o unidades funcionales, como la {\b Unidad de Control} y la {\b Unidad L\u243?gico-Aritm\u233?tica}.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab La Unidad de Control es la que contiene la l\u243?gica necesaria para {\b leer} cada instrucci\u243?n del programa que est\u225? en memoria, {\b ejecutarla}, y pasar a la {\b siguiente} instrucci\u243?n. Esta l\u243?gica se llama el {\b ciclo de instrucci\u243?n} y se repite {\b continuamente} mientras la CPU est\u225? funcionando.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab La Unidad L\u243?gico-Aritm\u233?tica es la que efectivamente realiza los c\u243?mputos con los datos.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Arquitectura de Von Neumann\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 M\u225?quina de programa almacenado\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Por supuesto, adem\u225?s de todos esos componentes que hemos nombrado, hay muchas otras cosas que f\u237?sicamente forman parte de la computadora; pero la descripci\u243?n de la computadora que hemos hecho hasta el momento dice, por lo menos en l\u237?neas generales, los componentes fundamentales que tiene cualquier computadora actual. Esta descripci\u243?n puede resumirse diciendo que la computadora es una {\b m\u225?quina de Von Neumann o m\u225?quina de programa almacenado}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En esta clase de m\u225?quinas, existe una memoria; que contiene instrucciones y datos; que como contenidos de esa memoria, no se diferencian, salvo por la forma como son utilizados.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Estas m\u225?quinas ejecutan las instrucciones almacenadas en memoria secuencialmente, es decir, procediendo desde las direcciones inferiores de la memoria hacia las superiores, leyendo y ejecutando cada instrucci\u243?n y pasando a la siguiente.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 CPU y Memoria\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En una {\b m\u225?quina de Von Neumann}, entonces, aparecen dos componentes b\u225?sicos fundamentales que son la CPU y la memoria,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 la primera conteniendo una {\b Unidad de Control, o UC}, para realizar el {\b ciclo de instrucci\u243?n},\par}
{\pard \ql \f0 \sa180 \li0 \fi0 y una {\b Unidad L\u243?gico-Aritm\u233?tica, o ALU}, para el c\u243?mputo.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Buses\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En la m\u225?quina existen diferentes clases de buses para interconectar los componentes: {\b buses internos} de la CPU para comunicar la UC y la ALU,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b buses de sistema} que relacionan la CPU y la memoria,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 y otros {\b buses de Entrada/Salida} para comunicar todo el sistema con los dispositivos de entrada o de salida.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u191?En qu\u233? momento se utilizar\u225? cada clase de bus? Cuando la UC disponga que se debe ejecutar una instrucci\u243?n, tal como una suma, enviar\u225? los datos de partida, y la instrucci\u243?n, a la ALU a trav\u233?s de un bus interno. Si la ALU necesita m\u225?s datos, los obtendr\u225? de la memoria a trav\u233?s de un bus de sistema. Si la CPU encuentra instrucciones que ordenan presentar el resultado del c\u243?mputo al usuario, usar\u225? un bus de Entrada/Salida para emitir ese resultado por pantalla o por impresora.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Modelo Computacional Binario Elemental\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para comprender desde lo m\u225?s b\u225?sico c\u243?mo opera la computadora, recurrimos al {\b MCBE o Modelo Computacional Binario Elemental}, que es una m\u225?quina te\u243?rica. El MCBE es una computadora extremadamente simple, pero que podr\u237?a ser implementada f\u237?sicamente, y funcionar\u237?a como la mayor\u237?a de las computadoras actuales. Bueno, con muchas menos capacidades, claro, pero manteniendo lo esencial de las computadoras de programa almacenado.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Esquema del MCBE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\pict\pngblip }\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En este esquema del MCBE vemos los tres registros de la CPU: el {\b PC o contador de programa}, el {\b IR o registro de instrucci\u243?n}, situados en la Unidad de Control, y el {\b Acumulador}, situado en la Unidad L\u243?gico-aritm\u233?tica. Los tres son registros de ocho bits.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Adem\u225?s se representa {\b la memoria}, compuesta por 32 bytes de ocho bits. Las direcciones de los bytes van, entonces, {\b de 0 a 31}. Aqu\u237? hemos descompuesto la memoria en trozos solamente para poder representarla completa en el esquema, pero conviene pensar en la memoria como una \u250?nica sucesi\u243?n de bytes, numerados de 0 a 31. Es costumbre, al representar los diagramas de memoria, ubicar las posiciones con direcciones menores en la parte inferior del diagrama, y las direcciones mayores arriba; como si la memoria fuera una escalera con posiciones numeradas a partir de 0 y ascendiendo.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Estado de la m\u225?quina}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Cada combinaci\u243?n posible de ceros y unos en los bits de cualquiera de los registros o posiciones de memoria representa un {\b estado} de la m\u225?quina, porque define los valores de la memoria y de los registros en un momento dado. Es decir, el estado de la m\u225?quina en cada momento es el conjunto de valores de los tres registros y de los 32 bytes de la memoria.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El estado de la m\u225?quina en cada momento define cu\u225?l ser\u225? el estado siguiente. Ninguna otra cosa interviene en el comportamiento de la m\u225?quina. En particular, la m\u225?quina no tiene voluntad ni toma decisiones propias: solamente cumple el {\b ciclo de instrucci\u243?n}, que la hace ejecutar las instrucciones del programa que tenga almacenado.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Memoria del MCBE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Las 32 posiciones de memoria, cada una de 8 bits, son casi todas iguales, con dos excepciones.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab La posici\u243?n 30 (casi al final de la memoria) est\u225? reservada para comunicaci\u243?n con dispositivos de entrada. Es s\u243?lo de lectura, es decir, no se pueden escribir contenidos en esa direcci\u243?n. Cuando leemos esa posici\u243?n de memoria, la m\u225?quina detiene su programa y espera que el usuario introduzca un dato. Una vez que el usuario ha terminado de escribirlo, el MCBE contin\u250?a la operaci\u243?n del programa con el dato reci\u233?n le\u237?do.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab La posici\u243?n 31 es solamente de escritura. Al escribir un dato en la direcci\u243?n 31, hacemos que el MCBE escriba ese valor por pantalla, y solamente as\u237? podemos saber el resultado de un c\u243?mputo.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Registros del MCBE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Como hemos dicho, los registros son lugares de almacenamiento temporario para varios usos. Los registros funcionan en forma parecida a la memoria, en el sentido de que se pueden leer o escribir datos en ellos, pero normalmente en una computadora f\u237?sica su velocidad de acceso es mayor.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Los registros del MCBE tienen diferentes funciones. El registro {\b PC, o contador de programa,} contiene en cada momento la direcci\u243?n de la pr\u243?xima instrucci\u243?n que se va a ejecutar; es decir, contiene un n\u250?mero que es la direcci\u243?n de la posici\u243?n de memoria donde est\u225? almacenada la instrucci\u243?n que est\u225? por ejecutar el MCBE.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Antes de ejecutar cada instrucci\u243?n, la CPU va a {\b copiarla} en el registro {\b IR, o registro de instrucci\u243?n}; y mientras est\u225? almacenada all\u237? la instrucci\u243?n, va a ser decodificada, es decir, la CPU va a interpretar de qu\u233? instrucci\u243?n se trata, y la va a ejecutar.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El registro {\b acumulador}, que pertenece a la ALU, es un registro que interviene en casi todas las operaciones del MCBE; sobre todo para las operaciones aritm\u233?ticas.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 CPU del MCBE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Entonces la CPU del MCBE queda definida como el conjunto de {\b Unidad de Control} con dos registros {\b PC e IR}, m\u225?s {\b Unidad l\u243?gico-aritm\u233?tica} con un registro {\b acumulador}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Esta CPU va a ser muy limitada y solamente va a ejecutar operaciones de suma y resta en complemento a 2, con ocho bits. No va a ejecutar {\b multiplicaciones}, ni {\b divisiones}, ni operaciones en {\b punto flotante}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Formato de instrucciones del MCBE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b C\u243?digo de instrucci\u243?n} Las instrucciones del MCBE se codifican en ocho bits y por lo tanto pueden ser almacenadas en un byte de la memoria, o en el registro IR. Cada instrucci\u243?n se divide en dos partes: los tres bits de m\u225?s a la izquierda se destinan a representar el {\b c\u243?digo de instrucci\u243?n}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Argumentos u operandos} Los cinco bits restantes representan el {\b argumento u operando} de esa instrucci\u243?n, es decir, el dato con el cual tiene que operar esa instrucci\u243?n.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Direcciones y desplazamientos} Por otro lado, los operandos pueden ser de dos clases: o bien {\b direcciones}, o bien {\b desplazamientos}. Si el operando es una direcci\u243?n, es porque la CPU necesita conocer la direcci\u243?n de un dato. Si es un desplazamiento, ese desplazamiento es {\b una cantidad de posiciones} que hay que trasladarse en la memoria, para encontrar la siguiente instrucci\u243?n que hay que procesar.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Cuando el operando es una direcci\u243?n, los cinco bits del operando representan una cantidad sin signo (porque no pueden existir direcciones negativas).\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Cuando es un desplazamiento, esos cinco bits son {\b con signo}, y m\u225?s precisamente, en complemento a 2; porque el desplazamiento puede ser {\b negativo}, indicando que hay que {\b volver hacia atr\u225?s, a una cierta direcci\u243?n de la memoria} a ejecutar una instrucci\u243?n que tal vez ya fue ejecutada.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Notemos que al representar las direcciones con cinco bits, sin signo, tenemos un rango de representaci\u243?n de 0 a 31, justo lo que necesitamos para alcanzar todas las posiciones de memoria.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para los desplazamientos, como estamos usando un sistema con signo, tenemos un rango de -16 a 15. Lo que quiere decir que al trasladarnos de un lugar a otro de la memoria, vamos a poder hacerlo en saltos de a lo sumo 16 bytes hacia atr\u225?s o 15 bytes hacia adelante.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Conjunto de instrucciones del MCBE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Las instrucciones del MCBE se dividen en cuatro grupos.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Las instrucciones de transferencia de datos son las que leen o escriben datos en la memoria.\line \par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Las aritm\u233?ticas son las que operan entre esos datos de la memoria y el valor presente en el registro acumulador.\line \par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Las de salto o transferencia de control, las que desv\u237?an, derivan o trasladan la ejecuci\u243?n a otra posici\u243?n de memoria.\line \par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Y las de control, completan el funcionamiento de la m\u225?quina, por ejemplo controlando cu\u225?ndo va a detenerse el programa.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Notemos que, como tenemos un campo de {\b tres bits} para definir el c\u243?digo de instrucci\u243?n, no vamos a poder tener m\u225?s que {\b ocho instrucciones}. Precisamente hay dos instrucciones en cada grupo de estos cuatro que hemos definido.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Instrucciones de transferencia de datos}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Las instrucciones de transferencia de datos son dos. El c\u243?digo 010 copia un byte de la memoria hacia el acumulador. Para esto se necesita la {\b direcci\u243?n} de ese byte, y esa direcci\u243?n es precisamente el argumento u operando de la instrucci\u243?n, y por lo tanto esa direcci\u243?n est\u225? codificada en los cinco bits de operando de la instrucci\u243?n.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El c\u243?digo 011 es la operaci\u243?n inversa, es decir, copia el contenido del registro acumulador en una posici\u243?n de memoria. La direcci\u243?n de esa posici\u243?n est\u225?, tambi\u233?n, determinada por los cinco bits de operando.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En cualquiera de los dos casos, luego de ejecutarse la instrucci\u243?n, el valor del PC queda valiendo 1 m\u225?s de lo que val\u237?a antes, es decir, se incrementa en 1. Esto permite que el ciclo de instrucci\u243?n pase a la instrucci\u243?n siguiente.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El efecto sobre el estado de la m\u225?quina es exactamente lo que se describe aqu\u237?: cambia el valor del acumulador, en el caso de la instrucci\u243?n 010, o el valor de una posici\u243?n de memoria, en el caso del c\u243?digo 011, y el valor del PC se incrementa en 1. No ocurre ning\u250?n otro cambio en el estado de la m\u225?quina, ni en los registros ni en la memoria.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Instrucciones aritm\u233?ticas}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Las instrucciones aritm\u233?ticas tambi\u233?n son dos. Si el c\u243?digo es 100, la CPU va a buscar el valor contenido en la direcci\u243?n dada por el operando, y lo suma al acumulador. Es decir, se suman el valor que tuviera anteriormente el acumulador, con el valor que proviene de esa posici\u243?n de memoria. El resultado queda en el acumulador. El valor de la posici\u243?n de memoria no var\u237?a.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Si el c\u243?digo es 101, la operaci\u243?n es una resta, que como sabemos consiste en complementar a 2 el operando y luego sumar. El resultado, igual que en la instrucci\u243?n de suma, queda en el acumulador, y la posici\u243?n de memoria queda sin cambios. Como en las instrucciones de transferencia de datos, el registro PC se incrementa en 1. Decimos que el PC {\b queda apuntando} a la siguiente instrucci\u243?n.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Instrucciones de salto}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Las dos instrucciones {\b de salto, o de transferencia de control}, tienen un efecto diferente. Funcionan modificando exclusivamente el valor del registro PC. En ambos casos, el operando es un valor con signo a cinco bits. En el caso del c\u243?digo 110, ese valor se suma algebraicamente al valor que tuviera hasta el momento el registro PC. Con lo cual el PC queda apuntando a alguna posici\u243?n de memoria por delante o por detr\u225?s de donde estaba antes. As\u237?, el ciclo de instrucci\u243?n siguiente va a leer la instrucci\u243?n ubicada en esa nueva direcci\u243?n que ahora est\u225? contenida en el PC.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El c\u243?digo 110 es una instrucci\u243?n de salto {\b incondicional}, es decir, {\b siempre} provoca un {\b salto} en la ejecuci\u243?n. En el caso del c\u243?digo 111, el salto es {\b condicional, y depende del valor del registro acumulador}. Si el acumulador {\b tiene un valor 0}, se produce el salto, sumando el valor del desplazamiento al registro PC. Pero si el acumulador no vale cero, simplemente se incrementa el PC en 1 como en el resto de las instrucciones; y el control sigue secuencialmente como es normal.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Otras instrucciones}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Hasta el momento no hemos explicado c\u243?mo se detiene la m\u225?quina. El ciclo de instrucci\u243?n continuamente va a ejecutar la instrucci\u243?n siguiente, sin parar nunca. Para terminar la ejecuci\u243?n usamos la instrucci\u243?n 001. El programa se detiene, y el estado final de la m\u225?quina queda con los valores que recibieron por \u250?ltima vez los registros y la memoria. El valor del PC no cambia.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 La operaci\u243?n 000 no tiene ning\u250?n efecto sobre el estado del MCBE, salvo incrementar el PC. Ning\u250?n otro registro ni posici\u243?n de memoria cambia su valor.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Ciclo de instrucci\u243?n\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Ahora podemos definir con m\u225?s rigurosidad lo que se entiende por {\b ciclo de instrucci\u243?n}. El MCBE inicia su operaci\u243?n con todos los contenidos de la memoria y registros en 0, y se pone a ejecutar continuamente el ciclo de instrucci\u243?n. Para esto repite continuamente las fases siguientes.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Copia en el registro IR la instrucci\u243?n cuya direcci\u243?n est\u225? en el PC. Como el PC comienza con un valor 0, esto significa copiar la instrucci\u243?n almacenada en la direcci\u243?n 0 hacia el IR.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Decodifica la instrucci\u243?n, lo que significa separar la instrucci\u243?n en sus dos componentes, que son el c\u243?digo de operaci\u243?n, de tres bits, y el operando o argumento, de cinco bits.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Se ejecuta la instrucci\u243?n, lo que significa que va a haber alg\u250?n efecto sobre el estado de la m\u225?quina. Si es una instrucci\u243?n de transferencia de datos, cambiar\u225? el registro acumulador o alguna posici\u243?n de memoria; si es una instrucci\u243?n aritm\u233?tica, cambiar\u225? el valor del registro acumulador; si es de transferencia de control, cambiar\u225? el valor del PC, etc.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab Una vez ejecutada la instrucci\u243?n, se vuelve a repetir el ciclo, leyendo la siguiente instrucci\u243?n que haya que ejecutar, que ser\u225? aquella cuya direcci\u243?n est\u233? contenida en el PC.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Programaci\u243?n del MCBE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u191?C\u243?mo es, entonces, un programa para esta m\u225?quina te\u243?rica? Es una sucesi\u243?n de bytes, que representan instrucciones y datos, contenidos en la memoria a partir de la direcci\u243?n 0, y donde cada byte va a ser interpretado como instrucci\u243?n o como dato seg\u250?n lo diga el programa. Como el estado inicial de la m\u225?quina es {\b con todos los valores en 0}, lo \u250?nico que puede decirse con seguridad es que {\b la primera posici\u243?n de la memoria contiene una instrucci\u243?n}. Pero a partir de all\u237?, el desarrollo de la ejecuci\u243?n va a ser dado por las instrucciones particulares que contenga el programa.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1  | Direcci\u243?n | Contenido |\line
 | 00000     | 01000110  |\line
 | 00001     | 10000111  |\line
 | 00010     | 01101000  |\line
 | 00011     | 00100000  |\line
 | 00100     |           |\line
 | 00101     |           |\line
 | 00110     | 00001100  |\line
 | 00111     | 00000001  |\line
 | 01000     |           |\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab En este programa en particular, la primera instrucci\u243?n es 010 00110, que es una instrucci\u243?n de transferencia de datos de la posici\u243?n 6 al acumulador.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab La segunda instrucci\u243?n es 100 00111, que es una suma del valor que haya en la posici\u243?n 7 al acumulador.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab La tercera instrucci\u243?n es 011 01000, que significa transferir el valor que haya en el acumulador a la posici\u243?n 8.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Y la cuarta instrucci\u243?n es 001 00000, que es la instrucci\u243?n de parada, con lo cual termina el programa.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Todas \u233?stas eran las instrucciones del programa. En las posiciones 6 y 7 de la memoria tenemos datos almacenados en complemento a 2 sobre ocho bits. Estos datos son el n\u250?mero 12, en la posici\u243?n 6, y el n\u250?mero 1 en la posici\u243?n 7.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab En las restantes posiciones de memoria hay contenidos nulos, o sea, todos los bits en 0, y no los escribimos para no complicar m\u225?s el diagrama.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Traza de ejecuci\u243?n\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u191?Qu\u233? es realmente lo que hace este programa, y cu\u225?l es el resultado de ejecutarlo? Para poder saberlo, lo m\u225?s conveniente es hacer una {\b traza del programa}. Una traza es un diagrama o planilla donde preparamos {\b columnas} con los nombres de los {\b registros, la memoria y la salida}, para poder ir simulando manualmente la ejecuci\u243?n, e ir anotando qu\u233? valores toman esos registros; es decir, cu\u225?les son los sucesivos estados del MCBE.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para cada instrucci\u243?n que se ejecute usaremos un rengl\u243?n de la planilla.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En la traza solamente escribiremos los elementos del estado {\b que se modifiquen} en cada paso. En la columna de MEMORIA anotaremos cu\u225?ndo hay una operaci\u243?n de escritura en memoria, en la columna de SALIDA anotaremos cuando haya un contenido que se escriba en pantalla, etc.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Este programa en particular presenta la traza que veremos a continuaci\u243?n.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Queda como ejercicio seguir la traza e interpretar qu\u233? est\u225? ocurriendo en cada momento con cada uno de los registros y las posiciones de memoria.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Direcci\u243?n \u8594? Contenido\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 00000 \u8594? 01000110\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 00001 \u8594? 10000111\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 00010 \u8594? 01101000\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 00011 \u8594? 00100000\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 00100 \u8594?\line \par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 00101 \u8594?\line \par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 00110 \u8594? 00001100\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 00111 \u8594? 00000001\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 01000 \u8594? 00001101\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Ayuda\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 000 No operaci\u243?n\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 001 Parada\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 010 Mem \u8594? Ac\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 011 Ac \u8594? Mem\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 100 Sumar al Ac\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 101 Restar al Ac\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 110 Salto\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 111 Salto cond\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Preguntas\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab El MCBE, \u191?puede encontrar una instrucci\u243?n que no sea capaz de decodificar?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Supongamos que hemos almacenado en la posici\u243?n 14 un dato num\u233?rico que representa la edad de una persona. \u191?Qu\u233? pasa si en alg\u250?n momento de la ejecuci\u243?n el PC contiene el n\u250?mero 14? \u191?Qu\u233? pasa si esa persona tiene 33 a\u241?os?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab \u191?Podr\u237?a aumentarse la capacidad de memoria del MCBE? \u191?Esto requerir\u237?a alg\u250?n cambio adicional a la m\u225?quina?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Proponemos como ejercicio {\b examinar} las siguientes frases, tomadas de ex\u225?menes de la materia, a ver si descubrimos qu\u233? est\u225? mal en cada una de ellas.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab El primer paso del ciclo de instrucci\u243?n es cargar el IR en el PC.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Lo que hacen las instrucciones de salto es cambiar el efecto de las instrucciones en los registros del MCBE.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Las instrucciones de salto sirven como desplazamiento de instrucciones y cambian el orden de los registros.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab La instrucci\u243?n de salto incondicional es un desplazamiento sin signo, la de salto condicional es un desplazamiento con signo.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab Las instrucciones de salto copian el contenido de la direcci\u243?n en el acumulador.\sa180\par}
}
