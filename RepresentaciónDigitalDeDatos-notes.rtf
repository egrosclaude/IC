{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \qc \f0 \sa180 \li0 \fi0 \b \fs36 Representación de la información\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Contents\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Representaci\u243?n de datos num\u233?ricos\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Representaci\u243?n de datos num\u233?ricos\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Clasificaci\u243?n de los n\u250?meros\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Datos enteros\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Datos fraccionarios\sa180\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Rango de representaci\u243?n\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Representaci\u243?n sin signo SS(k)\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Rango de representaci\u243?n de SS(k)\sa180\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Representaci\u243?n con signo\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Sistema de Signo-magnitud SM(k)\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Rango de representaci\u243?n de SM(k)\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Limitaciones de Signo-Magnitud\sa180\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Sistema de Complemento a 2\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Operaci\u243?n de Complemento a 2\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Representaci\u243?n en Complemento a 2\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Conversi\u243?n de C2 a base 10\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab RR de C2 con {\i k} bits\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Comparando rangos de representaci\u243?n\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Aritm\u233?tica en C2\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Overflow o desbordamiento en C2\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Extensi\u243?n de signo en C2\sa180\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Notaci\u243?n en exceso o {\i bias}\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Conversi\u243?n entre exceso y decimal\sa180\sa180\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Continuar\u225?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Representaci\u243?n de datos num\u233?ricos\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Veremos de qu\u233? manera puede ser tratada mediante computadoras la informaci\u243?n correspondiente a n\u250?meros, textos, im\u225?genes y otros datos. Necesitaremos conocer las formas de representaci\u243?n de datos, y comenzaremos por los datos num\u233?ricos.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Representaci\u243?n de datos num\u233?ricos\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Hemos visto ejemplos de sistemas de numeraci\u243?n: en base 6, en base 10, o decimal, en base 2, o binario, en base 16, o hexadecimal, y en base 8, u octal; y sabemos convertir la representaci\u243?n de un n\u250?mero en cada una de estas bases, a los sistemas en las dem\u225?s bases. Sin embargo, a\u250?n nos falta considerar la representaci\u243?n num\u233?rica de varios casos importantes:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Hemos utilizado estos sistemas para representar \u250?nicamente n\u250?meros {\b enteros}. Nos falta ver de qu\u233? manera representar n\u250?meros racionales, es decir aquellos que tienen una parte fraccionaria (los "decimales").\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Adem\u225?s estos enteros han sido siempre {\b no negativos}, es decir, sabemos representar \u250?nicamente el 0 y los naturales. Nos falta considerar los negativos.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Por otra parte, no nos hemos planteado el problema de la {\b cantidad de d\u237?gitos}. Idealmente, un sistema de numeraci\u243?n puede usar infinitos d\u237?gitos para representar n\u250?meros arbitrariamente grandes. Si bien esto es matem\u225?ticamente correcto, las computadoras son objetos f\u237?sicos que tienen unas ciertas limitaciones, y con ellas no es posible representar n\u250?meros de infinita cantidad de d\u237?gitos.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En esta parte de la unidad mostraremos sistemas de representaci\u243?n utilizados en computaci\u243?n que permiten tratar estos problemas.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Clasificaci\u243?n de los n\u250?meros\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Es conveniente repasar la clasificaci\u243?n de los diferentes conjuntos de n\u250?meros y conocer las diferencias importantes entre \u233?stos. Los t\u237?tulos en el cuadro (tomado de Wikipedia) son referencias a los art\u237?culos enciclop\u233?dicos sobre cada uno de esos conjuntos.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/N%C3%BAmero_complejo"}}{\fldrslt{\ul
N\u250?meros complejos
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/N%C3%BAmero_complejo"}}{\fldrslt{\ul
Complejos
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/N%C3%BAmero_real"}}{\fldrslt{\ul
Reales
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/N%C3%BAmero_racional"}}{\fldrslt{\ul
Racionales
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/N%C3%BAmero_entero"}}{\fldrslt{\ul
Enteros
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/N%C3%BAmero_natural"}}{\fldrslt{\ul
Naturales
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/Uno"}}{\fldrslt{\ul
Uno
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/N%C3%BAmero_primo"}}{\fldrslt{\ul
Naturales primos
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/N%C3%BAmero_compuesto"}}{\fldrslt{\ul
Naturales compuestos
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/Cero"}}{\fldrslt{\ul
Cero
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/Entero_negativo"}}{\fldrslt{\ul
Enteros negativos
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/N%C3%BAmero_fraccionario"}}{\fldrslt{\ul
Fraccionarios
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/Fracci%C3%B3n_propia"}}{\fldrslt{\ul
Fracci\u243?n propia
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/Fracci%C3%B3n_impropia"}}{\fldrslt{\ul
Fracci\u243?n impropia
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/N%C3%BAmero_irracional"}}{\fldrslt{\ul
Irracionales
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/N%C3%BAmero_algebraico"}}{\fldrslt{\ul
Irracionales algebraicos
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/N%C3%BAmero_trascendente"}}{\fldrslt{\ul
Trascendentes
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://es.m.wikipedia.org/wiki/N%C3%BAmero_imaginario"}}{\fldrslt{\ul
Imaginarios
}}}
\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Preguntas}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab El {\b cero}, \u191?es un natural?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab \u191?Existen n\u250?meros naturales negativos? \u191?Y racionales negativos?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab \u191?Es correcto decir que un racional tiene una parte decimal que es, o bien finita, o bien peri\u243?dica?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab \u191?Puede haber dos expresiones diferentes para el mismo n\u250?mero, en el mismo sistema de numeraci\u243?n decimal?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab El n\u250?mero 0.9999... con 9 peri\u243?dico, y el n\u250?mero 1, \u191?son dos n\u250?meros diferentes o el mismo n\u250?mero? Si son diferentes, \u191?qu\u233? n\u250?mero se encuentra entre ellos dos?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab El n\u250?mero 1 es a la vez natural y entero. \u191?Por qu\u233? no puede haber un n\u250?mero que sea a la vez racional e irracional?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab \u191?Por qu\u233? jam\u225?s podremos computar la sucesi\u243?n completa de decimales de {\i \u960?}?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Datos enteros\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Veremos un sistema de representaci\u243?n de datos no negativos, llamado {\b sin signo}, y tres sistemas de representaci\u243?n de datos num\u233?ricos enteros, llamados {\b signo-magnitud}, {\b complemento a 2} y {\b notaci\u243?n en exceso}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Datos fraccionarios\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para representar fraccionarios consideraremos los sistemas de {\b punto fijo} y {\b punto flotante}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Rango de representaci\u243?n\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Cada sistema de representaci\u243?n de datos num\u233?ricos tiene su propio {\b rango de representaci\u243?n} (que podemos abreviar {\b RR}), o intervalo de n\u250?meros representables. Ning\u250?n n\u250?mero fuera de este rango puede ser representado en dicho sistema. Conocer este intervalo es importante para saber con qu\u233? limitaciones puede enfrentarse un programa que utilice alguno de esos sistemas.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El rango de los n\u250?meros representados bajo un sistema est\u225? dado por sus {\b l\u237?mites inferior y superior}, que definen qu\u233? zona de la recta num\u233?rica puede ser representada. Como ocurre con todo intervalo num\u233?rico cerrado, el rango de representaci\u243?n puede ser escrito como [{\i a},\u8198?{\i b}], donde {\i a} y {\i b} son sus l\u237?mites inferior y superior, respectivamente.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Por la forma en que est\u225?n dise\u241?ados, algunos sistemas de representaci\u243?n s\u243?lo pueden representar n\u250?meros muy peque\u241?os, o s\u243?lo positivos, o tanto negativos como positivos. En general, el RR {\b ser\u225? m\u225?s grande cuantos m\u225?s d\u237?gitos binarios}, o bits, tenga el sistema. Sin embargo, el RR depende tambi\u233?n de la forma como el sistema {\b utilice} esos d\u237?gitos binarios, ya que un sistema puede ser m\u225?s o menos {\b eficiente} que otro en el uso de esos d\u237?gitos, aunque la cantidad de d\u237?gitos sea la misma en ambos sistemas.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Por lo tanto, decimos que el rango de representaci\u243?n depende a la vez de la {\b cantidad de d\u237?gitos} y de la {\b forma de funcionamiento} del sistema de representaci\u243?n.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Representaci\u243?n sin signo SS(k)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Consideremos primero qu\u233? ocurre cuando queremos representar n\u250?meros enteros {\b no negativos} (es decir, {\b positivos o cero}) sobre una cantidad fija de bits.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En el sistema {\b sin signo}, simplemente usamos el sistema binario de numeraci\u243?n, tal como lo conocemos, {\b pero limit\u225?ndonos a una cantidad fija} de d\u237?gitos binarios o bits. Podemos entonces abreviar el nombre de este sistema como {\b SS(k)}, donde {\i k} es la cantidad fija de bits, o ancho, de cada n\u250?mero representado.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Rango de representaci\u243?n de SS(k)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u191?Cu\u225?l ser\u225? el rango de representaci\u243?n? El {\b cero} puede representarse, as\u237? que el l\u237?mite inferior del rango de representaci\u243?n ser\u225? 0. Pero \u191?cu\u225?l ser\u225? el l\u237?mite superior? Es decir, si la cantidad de d\u237?gitos binarios en este sistema es {\i k}, \u191?cu\u225?l es el n\u250?mero m\u225?s grande que podremos representar?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Podemos estudiarlo de dos maneras.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b 1. Usando combinatoria}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Contemos cu\u225?ntos n\u250?meros diferentes podemos escribir con {\i k} d\u237?gitos binarios. Imaginemos un n\u250?mero binario cualquiera con {\i k} d\u237?gitos. El d\u237?gito de m\u225?s a la derecha tiene \u250?nicamente dos posibilidades (0 o 1). Por cada una de \u233?stas hay nuevamente dos posibilidades para el siguiente hacia la izquierda (lo que da las cuatro posibilidades 00, 01, 10, 11). Por cada una de \u233?stas, hay dos posibilidades para el siguiente (dando las ocho posibilidades 000, 001, 010, 011, 100, 101, 110, 111), etc., y as\u237? hasta la posici\u243?n {\i k}. No hay m\u225?s posibilidades. Como hemos multiplicado 2 por s\u237? mismo {\i k} veces, la cantidad de n\u250?meros que se pueden escribir es 2{\super {\i k}}. Luego, el n\u250?mero m\u225?s grande posible es 2{\super {\i k}}\u8197?\u8722?\u8197?1. ({\b Pregunta}: \u191?Por qu\u233? 2{\super {\i k}}\u8197?\u8722?\u8197?1 y no 2{\super {\i k}}?).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b 2. Usando \u225?lgebra}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El n\u250?mero m\u225?s grande que podemos representar en un sistema sin signo a {\i k} d\u237?gitos es, seguramente, aquel donde todos los {\i k} d\u237?gitos valen {\b 1}. La Expresi\u243?n General que hemos visto nos dice que si un n\u250?mero {\i n} est\u225? escrito en base 2, {\b con {\i k} d\u237?gitos}, entonces {\i n}\u8196?=\u8196?{\i x}{\sub {\i k}\u8197?\u8722?\u8197?1}\u8197?\u215?\u8197?2{\super {\i k}\u8197?\u8722?\u8197?1}\u8197?+\u8197?...\u8197?+\u8197?{\i x}{\sub 1}\u8197?\u215?\u8197?2{\super 1}\u8197?+\u8197?{\i x}{\sub 0}\u8197?\u215?\u8197?2{\super 0} y, si queremos escribir el m\u225?s grande de todos, deber\u225?n ser todos los {\i x}{\sub {\i i}} iguales a 1. ({\b Pregunta}: \u191?Por qu\u233? si el n\u250?mero {\i n} tiene {\i k} d\u237?gitos binarios, el \u237?ndice del m\u225?s significativo es {\i k}\u8197?\u8722?\u8197?1 y no {\i k}?)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Esta suma vale entonces\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\i x}{\sub {\i k}\u8197?\u8722?\u8197?1}\u8197?\u215?\u8197?2{\super {\i k}\u8197?\u8722?\u8197?1}\u8197?+\u8197?...\u8197?+\u8197?{\i x}{\sub 1}\u8197?\u215?\u8197?2{\super 1}\u8197?+\u8197?{\i x}{\sub 0}\u8197?\u215?\u8197?2{\super 0}\u8196?=\u8196? \u8196?=\u8196?1\u8197?\u215?\u8197?2{\super {\i k}\u8197?\u8722?\u8197?1}\u8197?+\u8197?...\u8197?+\u8197?1\u8197?\u215?\u8197?2{\super 1}\u8197?+\u8197?1\u8197?\u215?\u8197?2{\super 0}\u8196?=\u8196? \u8196?=\u8196?2{\super {\i k}\u8197?\u8722?\u8197?1}\u8197?+\u8197?...\u8197?+\u8197?2{\super 1}\u8197?+\u8197?2{\super 0}\u8196?=\u8196? \u8196?=\u8196?2{\super {\i k}}\u8197?\u8722?\u8197?1\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Usando ambos argumentos hemos llegado a que el n\u250?mero m\u225?s grande que podemos representar con {\i k} d\u237?gitos binarios es 2{\super {\i k}}\u8197?\u8722?\u8197?1. Por lo tanto, {\b el rango de representaci\u243?n de un sistema sin signo a {\i k} d\u237?gitos, o SS(k), es [0,\u8198?2{\super {\i k}}\u8197?\u8722?\u8197?1]}. Todos los n\u250?meros representables en esta clase de sistemas son {\b positivos o cero}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Ejemplos}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Para un sistema de representaci\u243?n sin signo a 8 bits: [0,\u8198?2{\super 8}\u8197?\u8722?\u8197?1]\u8196?=\u8196?[0,\u8198?255]\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Con 16 bits: [0,\u8198?2{\super 16}\u8197?\u8722?\u8197?1]\u8196?=\u8196?[0,\u8198?65.535]\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Con 32 bits: [0,\u8198?2{\super 32}\u8197?\u8722?\u8197?1]\u8196?=\u8196?[0,\u8198?4.294.967.295]\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Representaci\u243?n con signo\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En la vida diaria manejamos continuamente n\u250?meros negativos, y los distinguimos de los positivos simplemente agregando un signo "menos". Representar esos datos en la memoria de la computadora no es tan directo, porque, como hemos visto, la memoria {\b solamente puede alojar ceros y unos}. Es decir, \u161?no podemos simplemente guardar un signo "menos"! Lo \u250?nico que podemos hacer es almacenar secuencias de ceros y unos.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Esto no era un problema cuando los n\u250?meros eran no negativos. Para poder representar, ahora, tanto n\u250?meros {\b positivos como negativos}, necesitamos cambiar la forma de representaci\u243?n. Esto quiere decir que una secuencia particular de d\u237?gitos binarios, que en un sistema sin signo tiene un cierto significado, ahora tendr\u225? un significado diferente. Algunas secuencias, que antes representaban n\u250?meros positivos, ahora representar\u225?n negativos.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Veremos los {\b sistemas de representaci\u243?n con signo} llamados {\b Signo-magnitud (SM)}, {\b Complemento a 2 (C2)} y {\b Notaci\u243?n en exceso}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Es importante tener en cuenta que {\b solamente se puede operar entre datos representados con el mismo sistema de representaci\u243?n}, y que el {\b resultado} de toda operaci\u243?n {\b vuelve a estar representado en el mismo sistema}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Preguntas}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab \u191?Cu\u225?les son los l\u237?mites del rango de representaci\u243?n de un sistema de representaci\u243?n num\u233?rica?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Un n\u250?mero escrito en un sistema de representaci\u243?n {\b con signo}, \u191?es siempre negativo?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab \u191?Para qu\u233? querr\u237?amos escribir un n\u250?mero positivo en un sistema de representaci\u243?n con signo?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Sistema de Signo-magnitud SM(k)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El sistema de {\b Signo-magnitud} no es el m\u225?s utilizado en la pr\u225?ctica, pero es el m\u225?s sencillo de comprender. Se trata simplemente de utilizar un bit (el de m\u225?s a la izquierda) para representar el {\b signo}. Si este bit tiene valor 0, el n\u250?mero representado es positivo; si es 1, es negativo. Los dem\u225?s bits se utilizan para representar la {\b magnitud}, es decir, el {\b valor absoluto} del n\u250?mero en cuesti\u243?n.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Ejemplos}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 7{\sub (10}\u8196?=\u8196?00000111{\sub (2}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab \u8197?\u8722?\u8197?7{\sub (10}\u8196?=\u8196?10000111{\sub (2}\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Como estamos reservando un bit para expresar el signo, ese bit ya no se puede usar para representar magnitud; y como el sistema tiene una cantidad de bits fija, el RR ya no podr\u225? representar el n\u250?mero m\u225?ximo que era posible con el sistema {\b sin signo}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Rango de representaci\u243?n de SM(k)\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab En todo n\u250?mero escrito en el sistema de signo-magnitud a {\i k} bits, ya sea positivo o negativo, hay un bit reservado para el signo, lo que implica que quedan {\i k}\u8197?\u8722?\u8197?1 bits para representar su valor absoluto.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Siendo un valor absoluto, estos {\i k}\u8197?\u8722?\u8197?1 bits representan un n\u250?mero {\b no negativo}. Adem\u225?s este n\u250?mero est\u225? representado con el sistema {\b sin signo} sobre {\i k}\u8197?\u8722?\u8197?1 bits, es decir, SS(k-1).\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Este n\u250?mero no negativo en SS(k-1) tendr\u225? un valor m\u225?ximo representable que coincide con el {\b l\u237?mite superior} del rango de representaci\u243?n {\b de SS(k-1)}.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Sabemos que el rango de representaci\u243?n de SS(k) es [0,\u8198?2{\super {\i k}}\u8197?\u8722?\u8197?1]. Por lo tanto, el rango de SS(k-1), reemplazando, ser\u225? [0,\u8198?2{\super {\i k}\u8197?\u8722?\u8197?1}\u8197?\u8722?\u8197?1].\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Esto quiere decir que el n\u250?mero representable en SM(k) cuyo valor absoluto es m\u225?ximo, es 2{\super {\i k}\u8197?\u8722?\u8197?1}\u8197?\u8722?\u8197?1. Por lo tanto \u233?ste es el l\u237?mite superior del rango de representaci\u243?n de SM(k).\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Pero en SM(k) tambi\u233?n se puede representar su opuesto negativo, simplemente cambiando el bit m\u225?s alto por 1. El opuesto del m\u225?ximo positivo representable es a su vez el n\u250?mero m\u225?s peque\u241?o, negativo, representable: \u8197?\u8722?\u8197?(2{\super {\i k}\u8197?\u8722?\u8197?1}\u8197?\u8722?\u8197?1).\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Con lo cual hemos calculado tanto el l\u237?mite inferior como el superior del rango de representaci\u243?n de SM(k), que, finalmente, es [\u8197?\u8722?\u8197?(2{\super {\i k}\u8197?\u8722?\u8197?1}\u8197?\u8722?\u8197?1),\u8198?2{\super {\i k}\u8197?\u8722?\u8197?1}\u8197?\u8722?\u8197?1].\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Limitaciones de Signo-Magnitud\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Si bien {\b SM(k)} es simple, no es tan efectivo, por varias razones:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Existen dos representaciones del 0 ("positiva" y "negativa"), lo cual desperdicia un representante.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Esto acorta el rango de representaci\u243?n.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab La aritm\u233?tica en SM no es f\u225?cil, ya que cada operaci\u243?n debe comenzar por averiguar si los operandos son positivos o negativos, operar con los valores absolutos y ajustar el resultado de acuerdo al signo reconocido anteriormente.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab El problema aritm\u233?tico se agrava con la existencia de las dos representaciones del cero: cada vez que un programa quisiera comparar un valor resultado de un c\u243?mputo con 0, deber\u237?a hacer {\b dos} comparaciones.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Sistema de Complemento a 2\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Por estos motivos, el sistema de SM dej\u243? de usarse y se dise\u241?\u243? un sistema que elimin\u243? estos problemas, el sistema de {\b complemento a 2}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para comprender el sistema de complemento a 2 es necesario primero conocer la {\b operaci\u243?n} de complementar a 2.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Operaci\u243?n de Complemento a 2\par}
{\pard \ql \f0 \sa180 \li0 \fi0 La {\b operaci\u243?n} de complementar a 2 consiste aritm\u233?ticamente en obtener el {\b opuesto} de un n\u250?mero (el que tiene el mismo valor absoluto pero signo opuesto).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para obtener el complemento a 2 de un n\u250?mero escrito en base 2, {\b se invierte cada uno de los bits (reemplazando 0 por 1 y viceversa) y al resultado se le suma 1}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Otra forma}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Otro modo de calcular el complemento a 2 de un n\u250?mero en base 2 es {\b copiar los bits, desde la derecha, hasta el primer 1 inclusive; e invertir todos los dem\u225?s a la izquierda}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Propiedad fundamental}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El resultado de esta operaci\u243?n, C2({\i a}), es el opuesto del n\u250?mero original {\i a}, y por lo tanto tiene la propiedad de que {\i a} y C2({\i a}) suman 0:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\i C}2({\i a})\u8197?+\u8197?{\i a}\u8196?=\u8196?0\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Comprobaci\u243?n}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Podemos comprobar si la complementaci\u243?n fue bien hecha aplicando la {\b propiedad fundamental} del complemento. Si, al sumar nuestro resultado con el n\u250?mero original, no obtenemos 0, corresponde revisar la operaci\u243?n.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Ejemplos}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Busquemos el complemento a 2 de 111010. Invirtiendo todos los bits, obtenemos 000101. Sumando 1, queda 000110.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Busquemos el complemento a 2 de 0011. Invirtiendo todos los bits, obtenemos 1100. Sumando 1, queda 1101.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Comprobemos que el resultado obtenido en el \u250?ltimo caso, 1101, es efectivamente el opuesto de 0011: 0011\u8197?+\u8197?1101\u8196?=\u8196?0.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Representaci\u243?n en Complemento a 2\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Ahora que contamos con la {\b operaci\u243?n de complementar a 2}, podemos ver c\u243?mo se construye el {\b sistema de representaci\u243?n en Complemento a 2}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para representar un n\u250?mero {\i a} en complemento a 2 a k bits, comenzamos por considerar su signo:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Si {\i a} es positivo o cero, lo representamos como en SM(k), es decir, lo escribimos en base 2 a k bits.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Si {\i a} es negativo, tomamos su valor absoluto y lo complementamos a 2.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Ejemplos}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Representemos el n\u250?mero 17 en complemento a 2 con 8 bits. Como es positivo, lo escribimos en base 2, obteniendo 00010001, que es 17 en notaci\u243?n complemento a 2 con 8 bits.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Representemos el n\u250?mero -17 en complemento a 2 con 8 bits. Como es negativo, escribimos su valor absoluto en base 2, que es 00010001, y lo complementamos a 2. El resultado final es 11101111 que es -17 en notaci\u243?n complemento a 2 con 8 bits.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Conversi\u243?n de C2 a base 10\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para convertir un n\u250?mero {\i n}, escrito en el sistema de complemento a 2, a decimal, lo primero es determinar el signo. Si el bit m\u225?s alto es 1, {\i n} es negativo. En otro caso, {\i n} es positivo. Utilizaremos esta informaci\u243?n enseguida.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Si {\i n} es positivo, se interpreta el n\u250?mero como en el sistema sin signo, es decir, se utiliza la Expresi\u243?n General para hacer la conversi\u243?n de base como normalmente.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Si {\i n} es negativo, se lo complementa a 2, obteniendo el opuesto de {\i n}. Este n\u250?mero, que ahora es positivo, se convierte a base 10 como en el caso anterior; y finalmente se le agrega el signo "-" para reflejar el hecho de que es negativo.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Ejemplos}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Convertir a decimal {\i n}\u8196?=\u8196?00010001. Es positivo, luego, aplicamos la Expresi\u243?n General dando 17{\sub (10}.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Convertir a decimal {\i n}\u8196?=\u8196?11101111. Es negativo; luego, lo complementamos a 2 obteniendo 00010001. Aplicamos la Expresi\u243?n General obteniendo 17{\sub (10}. Como {\i n} era negativo, agregamos el signo menos y obtenemos el resultado final \u8197?\u8722?\u8197?17{\sub (10}.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 RR de C2 con {\i k} bits\par}
{\pard \ql \f0 \sa180 \li0 \fi0 La forma de utilizar los bits en el sistema de complemento a 2 permite recuperar un representante que estaba desperdiciado en SM.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El rango de representaci\u243?n del sistema complemento a 2 sobre {\i k} bits es [\u8197?\u8722?\u8197?(2{\super {\i k}\u8197?\u8722?\u8197?1}),\u8198?2{\super {\i k}\u8197?\u8722?\u8197?1}\u8197?\u8722?\u8197?1]. El l\u237?mite superior del RR de C2 es el mismo que el de SM, pero el {\b l\u237?mite inferior} es menor; luego el RR de C2 es mayor que el de SM.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El sistema de complemento a 2 tiene otras ventajas sobre SM:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab El cero tiene una \u250?nica representaci\u243?n, lo que facilita las comparaciones.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Las cuentas se hacen bit a bit, en lugar de requerir comprobaciones de signo.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab El mecanismo de c\u225?lculo es eficiente y f\u225?cil de implementar en hardware.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Solamente se requiere dise\u241?ar un algoritmo para {\b sumar}, no uno para sumar y otro para restar.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Comparando rangos de representaci\u243?n\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Diferentes sistemas, entonces, tienen diferentes rangos de representaci\u243?n. Si construimos un cuadro donde podamos comparar los rangos de representaci\u243?n {\b sin signo, signo-magnitud y complemento a 2} para una misma cantidad de bits, veremos que todas las combinaciones de bits est\u225?n utilizadas, s\u243?lo que de diferente forma.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El cuadro comparativo para cuatro bits mostrar\u225? que las combinaciones 0000...1111 representan los primeros 16 n\u250?meros no negativos para el sistema sin signo, mientras que esas mismas combinaciones tienen otro significado en los sistemas con signo. En \u233?stos \u250?ltimos, una misma combinaci\u243?n con el bit m\u225?s significativo en 1 siempre es negativa, pero el orden en que aparecen esas combinaciones es diferente entre SM y C2.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Por otro lado, los n\u250?meros positivos quedan representados por combinaciones id\u233?nticas en los tres sistemas, hasta donde lo permite el rango de representaci\u243?n de cada uno.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Si descartamos el bit de signo y consideramos s\u243?lo las magnitudes, los n\u250?meros negativos en SM aparecen con sus magnitudes crecientes alej\u225?ndose del 0, mientras que en C2 esas magnitudes comienzan en cero al representar el negativo m\u225?s peque\u241?o posible y crecen a medida que se acercan al cero.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Aritm\u233?tica en C2\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Una gran ventaja que aporta el sistema en Complemento a 2 es que los dise\u241?adores de hardware no necesitan implementar algoritmos de resta adem\u225?s de los de la suma. Cuando se necesita efectuar una resta, {\b se complementa el sustraendo} (que queda negativo) y luego se lo {\b suma} al minuendo. Las computadoras no restan: siempre suman.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Por ejemplo, la operaci\u243?n 9\u8197?\u8722?\u8197?8 se realiza como 9\u8197?+\u8197?(\u8197?\u8722?\u8197?8), donde (-8) es el complemento a 2 de 8.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Preguntas}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Un n\u250?mero en complemento a 2, \u191?tiene siempre su bit m\u225?s a la izquierda en 1?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab El complemento a 2 de un n\u250?mero, es decir, {\b C2(x)}, \u191?es siempre un n\u250?mero negativo?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab \u191?Qui\u233?n es {\b C2(0)}?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab \u191?Cu\u225?nto vale {\b C2(C2(x))}? Es decir, \u191?qu\u233? pasa si complemento a 2 el complemento a 2 de {\i x}?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab \u191?Cu\u225?nto vale {\b x + C2(x)}? Es decir, \u191?qu\u233? pasa si sumo a {\i x} su propio complemento a 2?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab \u191?C\u243?mo puedo verificar si calcul\u233? correctamente un complemento a 2?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Overflow o desbordamiento en C2\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En todo sistema de ancho fijo, la suma de {\b dos n\u250?meros positivos, o de dos n\u250?meros negativos} puede dar un resultado que sea imposible de representar debido a las limitaciones del rango de representaci\u243?n. Este problema se conoce como desbordamiento, u {\i overflow}. Cuando ocurre una situaci\u243?n de overflow, el resultado de la operaci\u243?n {\b no es v\u225?lido} y debe ser descartado.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Si conocemos los valores en decimal de dos n\u250?meros que queremos sumar, usando nuestro conocimiento del rango de representaci\u243?n del sistema podemos saber si el resultado quedar\u225? dentro de ese rango, y as\u237? sabemos, de antemano, si ese resultado ser\u225? v\u225?lido. Pero las computadoras no tienen forma de conocer a priori esta condici\u243?n, ya que todo lo que tienen es la representaci\u243?n en C2 de ambos n\u250?meros. Por eso necesitan alguna forma de detectar las situaciones de overflow, y el modo m\u225?s f\u225?cil para ellas es comprobar los dos \u250?ltimos bits de la fila de bits de acarreo o {\i carry}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El \u250?ltimo bit de la fila de carry, el que se posiciona en la \u250?ltima de las {\i k} columnas de la representaci\u243?n, se llama {\i carry-in}. El siguiente bit de carry, el que ya no puede acarrearse sobre ning\u250?n d\u237?gito v\u225?lido porque se han rebasado los {\i k} d\u237?gitos de la representaci\u243?n, se llama el {\i carry-out}.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Si, luego de efectuar una suma en C2, los valores de los bits de {\i carry-in} y {\i carry-out} son {\b iguales}, entonces la computadora detecta que el resultado no ha desbordado y que {\b la suma es v\u225?lida}. La operaci\u243?n de suma se ha efectuado exitosamente.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Si, luego de efectuar una suma en C2, los valores de los bits de {\i carry-in} y {\i carry-out} son {\b diferentes}, entonces la computadora detecta que el resultado ha desbordado y que {\b la suma no es v\u225?lida}. La operaci\u243?n de suma no se ha llevado a cabo exitosamente, y el resultado debe ser descartado.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Suma sin overflow}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Siguiendo atentamente la secuencia de bits de carry podemos detectar, igual que lo hace la computadora, si se producir\u225? un desbordamiento. En el caso de la operaci\u243?n 23\u8197?+\u8197?(\u8197?\u8722?\u8197?9), el resultado (que es 14) cae dentro del rango de representaci\u243?n, y esto se refleja en los bits de {\i carry-in} y de {\i carry-out}, cuyos valores son iguales.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Suma con overflow}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En el caso de la operaci\u243?n 123\u8197?+\u8197?9 en C2 a 8 bits, el resultado (que es 132) cae fuera del rango de representaci\u243?n. Esto se refleja en los bits de {\i carry-in} y de {\i carry-out}, que son diferentes. El resultado no es v\u225?lido y debe ser descartado.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Preguntas} - \u191?Qu\u233? condici\u243?n sobre los bits de carry permite asegurar que {\b no habr\u225?} overflow? - \u191?Para qu\u233? sistemas de representaci\u243?n num\u233?rica usamos la condici\u243?n de detecci\u243?n de overflow? - \u191?Puede existir overflow al sumar dos n\u250?meros de diferente signo? - \u191?Qu\u233? condici\u243?n sobre los bits {\b de signo} de los operandos permite asegurar que {\b no habr\u225?} overflow? - \u191?Puede haber casos de overflow al sumar dos n\u250?meros negativos? - \u191?Puede haber casos de overflow al restar dos n\u250?meros?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Extensi\u243?n de signo en C2\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Para poder efectuar una suma de dos n\u250?meros, ambos operandos deben estar representados en el mismo sistema de representaci\u243?n.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Una suma de dos operandos donde uno est\u233?, por ejemplo, en SM y el otro en C2, no tiene sentido aritm\u233?tico.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Adem\u225?s, la cantidad de bits de representaci\u243?n debe ser la misma.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En una suma en C2, si uno de los operandos estuviera expresado en un sistema con menos bits que el otro, ser\u225? necesario convertirlo al sistema del otro ({\b extenderlo}) y operar con ambos en ese sistema de mayor ancho.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Si el operando en el sistema de menor ancho es positivo, la extensi\u243?n se realiza simplemente {\b completando con ceros a la izquierda} hasta obtener la cantidad de d\u237?gitos del otro sistema. Si el operando del menor ancho es negativo, la extensi\u243?n de signo se hace {\b agregando unos}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Ejemplos}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\i A}\u8197?+\u8197?{\i B}\u8196?=\u8196?00101011{\sub (2}\u8197?+\u8197?00101{\sub (2}\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab A est\u225? en {\i C}{\sub 2}{\super 8} y B en {\i C}{\sub 2}{\super 5}\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Se completa B (positivo) como 00000101{\sub (2}\sa180\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\i A}\u8197?+\u8197?{\i B}\u8196?=\u8196?1010{\sub (2}\u8197?+\u8197?0110100{\sub (2}\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab A est\u225? en {\i C}{\sub 2}{\super 4} y B en {\i C}{\sub 2}{\super 7}\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Se completa A (negativo) como 1111010{\sub (2}\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Notaci\u243?n en exceso o {\i bias}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 En un sistema de notaci\u243?n en exceso, se elige un intervalo [{\i a},\u8198?{\i b}] de enteros a representar, y todos los valores dentro del intervalo se representan con una secuencia de bits de la misma longitud.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 La cantidad de bits deber\u225? ser la necesaria para representar todos los enteros del intervalo, inclusive los l\u237?mites, y por lo tanto estar\u225? en funci\u243?n de la longitud del intervalo. Un intervalo [{\i a},\u8198?{\i b}] de enteros, con sus l\u237?mites incluidos, comprende exactamente {\i n}\u8196?=\u8196?{\i b}\u8197?\u8722?\u8197?{\i a}\u8197?+\u8197?1 valores. Esta longitud del intervalo debe ser cubierta con una cantidad {\i k} de bits suficiente, lo cual obliga a que 2{\super {\i k}}\u8196?\u8805?\u8196?{\i n}. Supongamos que {\i n} sea una potencia de 2 para facilitar las ideas, de forma que 2{\super {\i k}}\u8196?=\u8196?{\i n}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Las 2{\super {\i k}} secuencias de {\i k} bits, ordenadas como de costumbre seg\u250?n su valor aritm\u233?tico, se aplican a los enteros en [{\i a},\u8198?{\i b}], uno por uno. Es decir, si usamos 3 bits, las secuencias ser\u225?n 000, 001, 010, ... hasta 111; y los valores representados ser\u225?n respectivamente:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 000 = {\i a}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 001 = {\i a}\u8197?+\u8197?1\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 010 = {\i a}\u8197?+\u8197?2\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab ...\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab 111 = {\i b}\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Notemos que tanto {\i a} como {\i b} pueden ser {\b negativos}. As\u237? podemos representar intervalos de enteros arbitrarios con secuencias de {\i k} bits, lo que nos vuelve a dar un sistema de representaci\u243?n con signo.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Con este m\u233?todo no es necesario que el bit de orden m\u225?s alto represente el signo. Tampoco que el intervalo contenga la misma cantidad de n\u250?meros negativos que positivos o cero, aunque para la mayor\u237?a de las aplicaciones es lo m\u225?s razonable.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 El sistema en exceso se utiliza como componente de otro sistema de representaci\u243?n m\u225?s complejo, la representaci\u243?n en punto flotante.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Conversi\u243?n entre exceso y decimal\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Una vez establecido un sistema en exceso:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Para calcular la secuencia binaria que corresponde a un valor decimal {\i d}, a {\i d} {\b le restamos} {\i a} y luego convertimos el resultado (que es {\b no negativo}) a binario sin signo.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Para calcular el valor decimal {\i d} representado por una secuencia binaria, convertimos la secuencia a decimal como en un sistema sin signo, y al resultado ({\b no negativo}) le {\b sumamos} el valor de {\i a}.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Ejemplo}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Representemos en sistema en exceso el intervalo [\u8197?\u8722?\u8197?3,\u8198?4] (que contiene 4\u8197?\u8722?\u8197?(\u8197?\u8722?\u8197?3)\u8197?+\u8197?1\u8196?=\u8196?8 enteros). Como necesitamos 8 secuencias binarias, usaremos 3 bits que producir\u225?n las secuencias 000, 001, ..., 111.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Para calcular la secuencia que corresponde al n\u250?mero 2, hacemos 2\u8197?\u8722?\u8197?(\u8197?\u8722?\u8197?3)\u8196?=\u8196?5 y el resultado ser\u225? la secuencia {\b 101}.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Para calcular el valor decimal que est\u225? representando la secuencia {\b 011}, convertimos 011 a decimal, que es 3, y le sumamos -3; el resultado es 0.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Preguntas sobre Notaci\u243?n en Exceso}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Dado un valor decimal a representar, \u191?c\u243?mo calculamos el binario?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Dado un binario, \u191?c\u243?mo calculamos el valor decimal representado?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab El sistema en exceso \u191?destina un bit para representar el signo?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab \u191?Se puede representar un intervalo que no contenga el cero?\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab \u191?C\u243?mo se comparan dos n\u250?meros en exceso para saber cu\u225?l es el mayor?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Continuar\u225?\par}
}
