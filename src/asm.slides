<!-----------------------------

<section data-background="#00CCFF">
<h2>Lenguajes de Bajo Nivel</h2>
</section>


<section>
<h2>Lenguajes de bajo nivel</h2>
<ul class="double">
<li>Lenguaje de máquina</li>
	<ul>
		<li>Códigos binarios de instrucciones y datos</li>
		<li>Direcciones de los datos en cinco bits</li>
		<li>Desplazamientos de saltos en forma numérica</li>
	</ul>
<br/>
<li>Lenguaje ensamblador o <i>Assembler</i></li>
	<ul>
		<li>Mnemónicos en lugar de códigos binarios</li>
		<li>Rótulos o etiquetas como referencia de las direcciones</li>
		<li>Rótulos o etiquetas como referencia de los saltos</li>
	</ul>
</ul>
<aside data-markdown class="notes"> 
Hemos visto un conjunto de instrucciones y convenciones sobre cómo se utilizan los datos en el MCBE, que es el llamado **lenguaje de máquina** del MCBE.  Por supuesto, escribir un programa para el MCBE y **depurarlo**, es decir, identificar y corregir sus errores, es una tarea muy dificultosa, porque los códigos de operación, las direcciones y los datos, fácilmente terminan confundiéndonos.  Para facilitar la programación, se ha definido un lenguaje alternativo llamado el **ensamblador** del MCBE. 


En  el lenguaje ensamblador del MCBE: 

* En lugar de códigos de tres bits usamos unas abreviaturas un poco más significativas (*mnemónicos* de instrucciones).
* En lugar de direcciones de cinco bits, usamos unos nombres simbólicos (*rótulos o etiquetas*) que hacen referencia a esas direcciones.
* Para las instrucciones de salto, en lugar de desplazamientos, también usamos rótulos o etiquetas para marcar la instrucción del programa adonde deseamos saltar.

Cada CPU del mundo real tiene su propio lenguaje de máquina, y aunque mucho más poderosos y de instrucciones más complejas, se parecen bastante, en líneas generales, al lenguaje de máquina del MCBE. Igual que ocurre con el lenguaje de máquina, cada CPU del mundo real tiene su propio lenguaje ensamblador, basado en los mismos principios que el que mostramos aquí. 

El lenguaje de máquina de cualquier CPU, y su lenguaje ensamblador (o *Assembler*), son llamados en general **lenguajes de bajo nivel**. Otros lenguajes, los de alto nivel, ocultan al usuario los detalles de la arquitectura de las computadoras y le facilitan la programación de problemas de software complejos.
</aside>
</section>

<section>
<h2>Lenguaje Ensamblador</h2>
<table style="font-size: 30px;">
<tr><th colspan="2">Mnemónico</th><th colspan="2">Instrucción</th></tr>
<tr><td><b>LD</b></td><td>Load (cargar)</td><td>010</td><td>Mem &rarr; Ac</td></tr>
<tr><td><b>ST</b></td><td>Store (almacenar)</td><td>011</td><td>Ac &rarr; Mem</td></tr>
<tr><td><b>ADD</b></td><td>Add (sumar)</td><td>100</td><td>Ac &larr; Ac + Mem</td></tr>
<tr><td><b>SUB</b></td><td>Subtract (restar)</td><td>101</td><td>Ac &larr; Ac - Mem</td></tr>
<tr><td><b>JMP</b></td><td>Jump (saltar)</td><td>110</td><td>PC &larr; PC + despl</td></tr>
<tr><td><b>JZ</b></td><td>Jump if Zero (saltar si cero)</td><td>111</td><td>Ac == 0 &rArr; PC &larr; PC + despl</td></tr>
<tr><td><b>HLT</b></td><td>Halt (detener)</td><td>001</td><td>Parada</td></tr>
<tr><td><b>NOP</b></td><td>No Operation</td><td>000</td><td>No operación</td></tr>
</tr>
</table>
<aside data-markdown class="notes">
Los **mnemónicos** o nombres simbólicos de las instrucciones se basan en los nombres en inglés de las operaciones correspondientes. Disponemos de los mnemónicos:
* LD para la operación de cargar el Acumulador con un contenido de memoria, y ST para la operación inversa.
* ADD para la operación de suma y SUB para la resta.
* JMP y JZ para los saltos incondicional y condicional, respectivamente.
* HLT para la instrucción de parada y NOP para la operación nula o no operación.
</aside>
</section>

<section>
<h2>Mnemónicos y rótulos</h2>

<table>
<tr><td>

<table style="font-size: 24px;">
<tr><th colspan="2">Lenguaje de máquina</th></tr>
<tr><th>Dirección</th><th>Instrucción</th></tr>
<tr><td>00000</td><td>01000111</td></tr>
<tr><td>00001</td><td>11100100</td></tr>
<tr><td>00010</td><td>01111111</td></tr>
<tr><td>00011</td><td>10100110</td></tr>
<tr><td>00100</td><td>11011101</td></tr>
<tr><td>00101</td><td>00100000</td></tr>
<tr><td>00110</td><td>00000001</td></tr>
<tr><td>00111</td><td>00000011</td></tr>
</table>

</td><td>


<table style="font-size: 24px;">
<tr><th colspan="4">Lenguaje ensamblador</th></tr>
<tr></th><th>Dirección</th><th>Rótulo</th><th>Mnemónico</th><th>Argumento</th></tr>
<tr><td>00000</td><td>      </td><td>LD</td><td>CANT</td></tr>
<tr><td>00001</td><td>SIGUE:</td><td>JZ</td><td>FIN</td></tr>
<tr><td>00010</td><td>      </td><td>ST</td><td>OUT</td></tr>
<tr><td>00011</td><td>      </td><td>SUB</td><td>UNO</td></tr>
<tr><td>00100</td><td>      </td><td>JMP</td><td>SIGUE</td></tr>
<tr><td>00101</td><td>FIN:</td><td>HLT</td><td></td></tr>
<tr><td>00110</td><td>UNO:</td><td>1</td><td></td></tr>
<tr><td>00111</td><td>CANT:</td><td>3</td><td></td></tr>
</table>

</td></tr>
</table>
<aside data-markdown class="notes">
Cuando escribimos un programa en el lenguaje **ensamblador** del MCBE, las instrucciones se corresponden una a una con las del programa en lenguaje de máquina.

Cuando necesitamos hacer referencia a una dirección, como en las operaciones de transferencia o en las aritméticas, el ensamblador nos permite independizarnos del valor de esa dirección y simplemente indicar un nombre simbólico o rótulo para esa dirección. Sin embargo, para que el programa quede completo, ese nombre simbólico debe aparecer en algún lugar del programa, al principio de la instrucción, y separado por un carácter ":" del resto de la línea. 

En este ejemplo, SIGUE, FIN, UNO y CANT son rótulos. El rótulo CANT, por ejemplo, nos permite referirnos en la primera instrucción, LD CANT, a un dato declarado más adelante con ese nombre. Del mismo modo, cuando la instrucción es de salto, podemos hacer referencia a la posición de memoria donde se hará el salto usando un rótulo, como en la quinta instrucción, JMP SIGUE. 

Los rótulos IN y OUT vienen predefinidos en el lenguaje ensamblador de MCBE y corresponden a las posiciones de memoria 30 (para entrada) y 31 (para salida) respectivamente.
 
Es importante recordar que, de todas maneras, en la traducción de ensamblador a lenguaje de máquina **para las instrucciones de salto**, el rótulo se sustituye por un **desplazamiento**, y no por una dirección.
</aside>
</section>

--------------------->
